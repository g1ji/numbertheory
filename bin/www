#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('filestringinfo:server');
var http = require('http');
var path = require("path");
var pathSep = path.sep
var fs = require('fs')


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

var targetDir = path.resolve(__dirname + "/../public/uploads");
var io = require('socket.io').listen(server);
io.on('connection', function (socket) {
    socket.on('readFile', function (info) {
        var uploadeFile = targetDir + "/" + info.fileName;
        var data = fs.readFileSync(uploadeFile);
        var noOfLinesInFile = data.toString().split('\n').length - 1;
        var noOfCharIntoFile = data.toString().length;
        var noOfGroupOf100 = parseInt(noOfCharIntoFile / 100) + ((noOfCharIntoFile % 100) === 0 ? 0 : 1);
        var uploadedFileName = info.fileName;
        var groupOf100chrs = data.toString().split('\n').join(' ').match(/.{1,100}/g);
        var fileNodes = info.fileNodes;
        var chartData = {
            "name": 'Uploaded file',
            "children": [
                {
                    "name": "Info",
                    "children": [
                        {"name": "Name:" + uploadedFileName},
                        {"name": "Line count:" + noOfLinesInFile},
                        {"name": "Group of 100 Characters [count]: " + noOfGroupOf100}
                    ]
                }, {
                    "name": "Characters Groups",
                    "children": []
                }
            ]
        };
        if (fileNodes.start > 0) {
            chartData.children[1].children.push({"name": 'Previous <<'});
        }
        groupOf100chrs.forEach(function (group, index) {
            if (index >= fileNodes.start && index <= fileNodes.end) {
                console.log(index)
                var child = {"name": (index + 1) + "-" + (index + 1) * 100,
                    "children": [
                        {"name": "Characters count : 100"},
                        {"name": "String count: " + group.split('').length},
                        {"name": group},
                        {"name": "words",
                            "children": []
                        }
                    ]
                };
                group.split(' ').forEach(function (word) {
                    child.children[3].children.push({"name": word});
                });
                chartData.children[1].children.push(child);
            }
        });
        if (fileNodes.end < noOfGroupOf100) {
            chartData.children[1].children.push({"name": 'Next >>'});
        }
        socket.emit('chartData', chartData);
    });
    





    socket.on('disconnect', function () {
        console.log('user disconnected');
    });
});

